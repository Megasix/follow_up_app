import 'dart:math';

import 'package:flutter/material.dart';
import 'package:follow_up_app/models/enums.dart';
import 'package:follow_up_app/models/user.dart';
import 'package:follow_up_app/services/database.dart';
import 'package:follow_up_app/shared/extensions.dart';
import 'package:follow_up_app/shared/snackbar.dart';
import 'package:get/get.dart';
import 'package:provider/provider.dart';
import 'package:uuid/uuid.dart';

class UserCreator extends StatefulWidget {
  UserCreator(this.userType, {Key? key}) : super(key: key);

  final UserType userType;

  @override
  _UserCreatorState createState() => _UserCreatorState();
}

class _UserCreatorState extends State<UserCreator> {
  final _formKey = GlobalKey<FormState>();

  String code = '######';
  String firstName = '';
  String lastName = '';

  //generates a random 6 alpha-numeric characters string (generated by Copilot btw)
  void _generateCode() {
    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

    var tempCode = '';
    for (var i = 0; i < 6; i++) {
      tempCode += possible[((Random().nextDouble() * possible.length).floor())];
    }

    setState(() => code = tempCode);
  }

  void _closePopup() {
    Navigator.pop(context);
  }

  void _submitUser() async {
    UserData newUser = new UserData(Uuid().v4(), widget.userType,
        activationCode: code, schoolCode: Provider.of<SchoolData>(context, listen: false).displayCode, firstName: firstName, lastName: lastName);

    await DatabaseService.updateUser(newUser);

    CustomSnackbar.showBar(context, newUser.firstName + ' ' + newUser.lastName + ' has been added to the database.');

    _closePopup();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => _closePopup(),
      child: Material(
        color: Colors.black.withOpacity(0.7),
        child: Center(
          child: ClipRRect(
            borderRadius: BorderRadius.circular(7),
            child: Container(
              constraints: BoxConstraints(
                maxWidth: MediaQuery.of(context).size.width * 2 / 3,
                minHeight: MediaQuery.of(context).size.height * 1 / 2,
                maxHeight: MediaQuery.of(context).size.height * 2 / 3,
              ),
              color: Colors.grey[850],
              padding: const EdgeInsets.all(16),
              child: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  mainAxisAlignment: MainAxisAlignment.start,
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: <Widget>[
                    Text('New ${widget.userType.stringify()}', style: Theme.of(context).textTheme.headline4!),
                    SizedBox(height: 16),
                    ElevatedButton(
                      child: Text('Generate New ${widget.userType.stringify()} Code'),
                      onPressed: () => _generateCode(),
                    ),
                    Center(
                      heightFactor: 2,
                      child: SelectableText(code, style: Get.textTheme.headline1!),
                    ),
                    Flexible(
                      fit: FlexFit.loose,
                      child: Form(
                        autovalidateMode: AutovalidateMode.onUserInteraction,
                        key: _formKey,
                        child: Column(
                          children: <Widget>[
                            Tooltip(
                              message: '${widget.userType.stringify()}\'s First Name',
                              child: TextFormField(
                                onChanged: (val) => setState(() => firstName = val),
                                validator: (val) => val == null || val.isEmpty || val.length > 15 ? 'First name must be 15 characters or less' : null,
                                decoration: const InputDecoration(
                                  hintText: "First Name",
                                ),
                              ),
                            ),
                            Tooltip(
                              message: '${widget.userType.stringify()}\'s Last Name',
                              child: TextFormField(
                                onFieldSubmitted: (val) => _submitUser(),
                                onChanged: (val) => setState(() => lastName = val),
                                validator: (val) => val == null || val.isEmpty || val.length > 15 ? 'Last name must be 15 characters or less' : null,
                                decoration: const InputDecoration(
                                  hintText: "Last Name",
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    SizedBox(height: 16),
                    ElevatedButton(
                      child: Text('Submit ${widget.userType.stringify()}'),
                      onPressed: code == '######' || !(_formKey.currentState?.validate() ?? false) ? null : () => _submitUser(),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
